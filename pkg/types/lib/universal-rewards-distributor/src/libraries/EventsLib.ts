/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export interface EventsLibInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "OwnerSet"
      | "PendingRootRevoked"
      | "PendingRootSet"
      | "RootSet"
      | "RootUpdaterSet"
      | "TimelockSet"
      | "UrdCreated"
  ): EventFragment;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    account: AddressLike,
    reward: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, reward: string, amount: bigint];
  export interface OutputObject {
    account: string;
    reward: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerSetEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingRootRevokedEvent {
  export type InputTuple = [caller: AddressLike];
  export type OutputTuple = [caller: string];
  export interface OutputObject {
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingRootSetEvent {
  export type InputTuple = [
    caller: AddressLike,
    newRoot: BytesLike,
    newIpfsHash: BytesLike
  ];
  export type OutputTuple = [
    caller: string,
    newRoot: string,
    newIpfsHash: string
  ];
  export interface OutputObject {
    caller: string;
    newRoot: string;
    newIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootSetEvent {
  export type InputTuple = [newRoot: BytesLike, newIpfsHash: BytesLike];
  export type OutputTuple = [newRoot: string, newIpfsHash: string];
  export interface OutputObject {
    newRoot: string;
    newIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootUpdaterSetEvent {
  export type InputTuple = [rootUpdater: AddressLike, active: boolean];
  export type OutputTuple = [rootUpdater: string, active: boolean];
  export interface OutputObject {
    rootUpdater: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockSetEvent {
  export type InputTuple = [newTimelock: BigNumberish];
  export type OutputTuple = [newTimelock: bigint];
  export interface OutputObject {
    newTimelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UrdCreatedEvent {
  export type InputTuple = [
    urd: AddressLike,
    caller: AddressLike,
    initialOwner: AddressLike,
    initialTimelock: BigNumberish,
    initialRoot: BytesLike,
    initialIpfsHash: BytesLike,
    salt: BytesLike
  ];
  export type OutputTuple = [
    urd: string,
    caller: string,
    initialOwner: string,
    initialTimelock: bigint,
    initialRoot: string,
    initialIpfsHash: string,
    salt: string
  ];
  export interface OutputObject {
    urd: string;
    caller: string;
    initialOwner: string;
    initialTimelock: bigint;
    initialRoot: string;
    initialIpfsHash: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventsLib extends BaseContract {
  connect(runner?: ContractRunner | null): EventsLib;
  waitForDeployment(): Promise<this>;

  interface: EventsLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerSet"
  ): TypedContractEvent<
    OwnerSetEvent.InputTuple,
    OwnerSetEvent.OutputTuple,
    OwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "PendingRootRevoked"
  ): TypedContractEvent<
    PendingRootRevokedEvent.InputTuple,
    PendingRootRevokedEvent.OutputTuple,
    PendingRootRevokedEvent.OutputObject
  >;
  getEvent(
    key: "PendingRootSet"
  ): TypedContractEvent<
    PendingRootSetEvent.InputTuple,
    PendingRootSetEvent.OutputTuple,
    PendingRootSetEvent.OutputObject
  >;
  getEvent(
    key: "RootSet"
  ): TypedContractEvent<
    RootSetEvent.InputTuple,
    RootSetEvent.OutputTuple,
    RootSetEvent.OutputObject
  >;
  getEvent(
    key: "RootUpdaterSet"
  ): TypedContractEvent<
    RootUpdaterSetEvent.InputTuple,
    RootUpdaterSetEvent.OutputTuple,
    RootUpdaterSetEvent.OutputObject
  >;
  getEvent(
    key: "TimelockSet"
  ): TypedContractEvent<
    TimelockSetEvent.InputTuple,
    TimelockSetEvent.OutputTuple,
    TimelockSetEvent.OutputObject
  >;
  getEvent(
    key: "UrdCreated"
  ): TypedContractEvent<
    UrdCreatedEvent.InputTuple,
    UrdCreatedEvent.OutputTuple,
    UrdCreatedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OwnerSet(address)": TypedContractEvent<
      OwnerSetEvent.InputTuple,
      OwnerSetEvent.OutputTuple,
      OwnerSetEvent.OutputObject
    >;
    OwnerSet: TypedContractEvent<
      OwnerSetEvent.InputTuple,
      OwnerSetEvent.OutputTuple,
      OwnerSetEvent.OutputObject
    >;

    "PendingRootRevoked(address)": TypedContractEvent<
      PendingRootRevokedEvent.InputTuple,
      PendingRootRevokedEvent.OutputTuple,
      PendingRootRevokedEvent.OutputObject
    >;
    PendingRootRevoked: TypedContractEvent<
      PendingRootRevokedEvent.InputTuple,
      PendingRootRevokedEvent.OutputTuple,
      PendingRootRevokedEvent.OutputObject
    >;

    "PendingRootSet(address,bytes32,bytes32)": TypedContractEvent<
      PendingRootSetEvent.InputTuple,
      PendingRootSetEvent.OutputTuple,
      PendingRootSetEvent.OutputObject
    >;
    PendingRootSet: TypedContractEvent<
      PendingRootSetEvent.InputTuple,
      PendingRootSetEvent.OutputTuple,
      PendingRootSetEvent.OutputObject
    >;

    "RootSet(bytes32,bytes32)": TypedContractEvent<
      RootSetEvent.InputTuple,
      RootSetEvent.OutputTuple,
      RootSetEvent.OutputObject
    >;
    RootSet: TypedContractEvent<
      RootSetEvent.InputTuple,
      RootSetEvent.OutputTuple,
      RootSetEvent.OutputObject
    >;

    "RootUpdaterSet(address,bool)": TypedContractEvent<
      RootUpdaterSetEvent.InputTuple,
      RootUpdaterSetEvent.OutputTuple,
      RootUpdaterSetEvent.OutputObject
    >;
    RootUpdaterSet: TypedContractEvent<
      RootUpdaterSetEvent.InputTuple,
      RootUpdaterSetEvent.OutputTuple,
      RootUpdaterSetEvent.OutputObject
    >;

    "TimelockSet(uint256)": TypedContractEvent<
      TimelockSetEvent.InputTuple,
      TimelockSetEvent.OutputTuple,
      TimelockSetEvent.OutputObject
    >;
    TimelockSet: TypedContractEvent<
      TimelockSetEvent.InputTuple,
      TimelockSetEvent.OutputTuple,
      TimelockSetEvent.OutputObject
    >;

    "UrdCreated(address,address,address,uint256,bytes32,bytes32,bytes32)": TypedContractEvent<
      UrdCreatedEvent.InputTuple,
      UrdCreatedEvent.OutputTuple,
      UrdCreatedEvent.OutputObject
    >;
    UrdCreated: TypedContractEvent<
      UrdCreatedEvent.InputTuple,
      UrdCreatedEvent.OutputTuple,
      UrdCreatedEvent.OutputObject
    >;
  };
}
