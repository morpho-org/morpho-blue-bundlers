/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export type FlowCapsStruct = { maxIn: BigNumberish; maxOut: BigNumberish };

export type FlowCapsStructOutput = [maxIn: bigint, maxOut: bigint] & {
  maxIn: bigint;
  maxOut: bigint;
};

export type FlowCapsConfigStruct = { id: BytesLike; caps: FlowCapsStruct };

export type FlowCapsConfigStructOutput = [
  id: string,
  caps: FlowCapsStructOutput
] & { id: string; caps: FlowCapsStructOutput };

export interface EventsLibInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "PublicReallocateTo"
      | "PublicWithdrawal"
      | "SetAdmin"
      | "SetFee"
      | "SetFlowCaps"
      | "TransferFee"
  ): EventFragment;
}

export namespace PublicReallocateToEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    supplyMarketId: BytesLike,
    suppliedAssets: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    vault: string,
    supplyMarketId: string,
    suppliedAssets: bigint
  ];
  export interface OutputObject {
    sender: string;
    vault: string;
    supplyMarketId: string;
    suppliedAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicWithdrawalEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    id: BytesLike,
    withdrawnAssets: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    vault: string,
    id: string,
    withdrawnAssets: bigint
  ];
  export interface OutputObject {
    sender: string;
    vault: string;
    id: string;
    withdrawnAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [sender: string, vault: string, admin: string];
  export interface OutputObject {
    sender: string;
    vault: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [sender: string, vault: string, fee: bigint];
  export interface OutputObject {
    sender: string;
    vault: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFlowCapsEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    config: FlowCapsConfigStruct[]
  ];
  export type OutputTuple = [
    sender: string,
    vault: string,
    config: FlowCapsConfigStructOutput[]
  ];
  export interface OutputObject {
    sender: string;
    vault: string;
    config: FlowCapsConfigStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFeeEvent {
  export type InputTuple = [
    sender: AddressLike,
    vault: AddressLike,
    amount: BigNumberish,
    feeRecipient: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    vault: string,
    amount: bigint,
    feeRecipient: string
  ];
  export interface OutputObject {
    sender: string;
    vault: string;
    amount: bigint;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventsLib extends BaseContract {
  connect(runner?: ContractRunner | null): EventsLib;
  waitForDeployment(): Promise<this>;

  interface: EventsLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "PublicReallocateTo"
  ): TypedContractEvent<
    PublicReallocateToEvent.InputTuple,
    PublicReallocateToEvent.OutputTuple,
    PublicReallocateToEvent.OutputObject
  >;
  getEvent(
    key: "PublicWithdrawal"
  ): TypedContractEvent<
    PublicWithdrawalEvent.InputTuple,
    PublicWithdrawalEvent.OutputTuple,
    PublicWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "SetAdmin"
  ): TypedContractEvent<
    SetAdminEvent.InputTuple,
    SetAdminEvent.OutputTuple,
    SetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetFee"
  ): TypedContractEvent<
    SetFeeEvent.InputTuple,
    SetFeeEvent.OutputTuple,
    SetFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetFlowCaps"
  ): TypedContractEvent<
    SetFlowCapsEvent.InputTuple,
    SetFlowCapsEvent.OutputTuple,
    SetFlowCapsEvent.OutputObject
  >;
  getEvent(
    key: "TransferFee"
  ): TypedContractEvent<
    TransferFeeEvent.InputTuple,
    TransferFeeEvent.OutputTuple,
    TransferFeeEvent.OutputObject
  >;

  filters: {
    "PublicReallocateTo(address,address,bytes32,uint256)": TypedContractEvent<
      PublicReallocateToEvent.InputTuple,
      PublicReallocateToEvent.OutputTuple,
      PublicReallocateToEvent.OutputObject
    >;
    PublicReallocateTo: TypedContractEvent<
      PublicReallocateToEvent.InputTuple,
      PublicReallocateToEvent.OutputTuple,
      PublicReallocateToEvent.OutputObject
    >;

    "PublicWithdrawal(address,address,bytes32,uint256)": TypedContractEvent<
      PublicWithdrawalEvent.InputTuple,
      PublicWithdrawalEvent.OutputTuple,
      PublicWithdrawalEvent.OutputObject
    >;
    PublicWithdrawal: TypedContractEvent<
      PublicWithdrawalEvent.InputTuple,
      PublicWithdrawalEvent.OutputTuple,
      PublicWithdrawalEvent.OutputObject
    >;

    "SetAdmin(address,address,address)": TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;
    SetAdmin: TypedContractEvent<
      SetAdminEvent.InputTuple,
      SetAdminEvent.OutputTuple,
      SetAdminEvent.OutputObject
    >;

    "SetFee(address,address,uint256)": TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;
    SetFee: TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;

    "SetFlowCaps(address,address,tuple[])": TypedContractEvent<
      SetFlowCapsEvent.InputTuple,
      SetFlowCapsEvent.OutputTuple,
      SetFlowCapsEvent.OutputObject
    >;
    SetFlowCaps: TypedContractEvent<
      SetFlowCapsEvent.InputTuple,
      SetFlowCapsEvent.OutputTuple,
      SetFlowCapsEvent.OutputObject
    >;

    "TransferFee(address,address,uint256,address)": TypedContractEvent<
      TransferFeeEvent.InputTuple,
      TransferFeeEvent.OutputTuple,
      TransferFeeEvent.OutputObject
    >;
    TransferFee: TypedContractEvent<
      TransferFeeEvent.InputTuple,
      TransferFeeEvent.OutputTuple,
      TransferFeeEvent.OutputObject
    >;
  };
}
