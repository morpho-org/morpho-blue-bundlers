/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type MarketParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  oracle: AddressLike;
  irm: AddressLike;
  lltv: BigNumberish;
};

export type MarketParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  oracle: string,
  irm: string,
  lltv: bigint
] & {
  loanToken: string;
  collateralToken: string;
  oracle: string;
  irm: string;
  lltv: bigint;
};

export type MarketAllocationStruct = {
  marketParams: MarketParamsStruct;
  assets: BigNumberish;
};

export type MarketAllocationStructOutput = [
  marketParams: MarketParamsStructOutput,
  assets: bigint
] & { marketParams: MarketParamsStructOutput; assets: bigint };

export interface IMetaMorphoBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DECIMALS_OFFSET"
      | "MORPHO"
      | "acceptCap"
      | "acceptGuardian"
      | "acceptTimelock"
      | "curator"
      | "fee"
      | "feeRecipient"
      | "guardian"
      | "isAllocator"
      | "lastTotalAssets"
      | "reallocate"
      | "revokePendingCap"
      | "revokePendingGuardian"
      | "revokePendingMarketRemoval"
      | "revokePendingTimelock"
      | "setCurator"
      | "setFee"
      | "setFeeRecipient"
      | "setIsAllocator"
      | "setSkimRecipient"
      | "setSupplyQueue"
      | "skim"
      | "skimRecipient"
      | "submitCap"
      | "submitGuardian"
      | "submitMarketRemoval"
      | "submitTimelock"
      | "supplyQueue"
      | "supplyQueueLength"
      | "timelock"
      | "updateWithdrawQueue"
      | "withdrawQueue"
      | "withdrawQueueLength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMALS_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MORPHO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptCap",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "curator", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reallocate",
    values: [MarketAllocationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePendingCap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePendingGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePendingMarketRemoval",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePendingTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAllocator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSkimRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyQueue",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "skim", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "skimRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitCap",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMarketRemoval",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawQueue",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQueueLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMALS_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MORPHO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reallocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokePendingCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePendingGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePendingMarketRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePendingTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCurator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSkimRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skimRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMarketRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQueueLength",
    data: BytesLike
  ): Result;
}

export interface IMetaMorphoBase extends BaseContract {
  connect(runner?: ContractRunner | null): IMetaMorphoBase;
  waitForDeployment(): Promise<this>;

  interface: IMetaMorphoBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DECIMALS_OFFSET: TypedContractMethod<[], [bigint], "view">;

  MORPHO: TypedContractMethod<[], [string], "view">;

  acceptCap: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [void],
    "nonpayable"
  >;

  acceptGuardian: TypedContractMethod<[], [void], "nonpayable">;

  acceptTimelock: TypedContractMethod<[], [void], "nonpayable">;

  curator: TypedContractMethod<[], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  guardian: TypedContractMethod<[], [string], "view">;

  isAllocator: TypedContractMethod<[target: AddressLike], [boolean], "view">;

  lastTotalAssets: TypedContractMethod<[], [bigint], "view">;

  reallocate: TypedContractMethod<
    [allocations: MarketAllocationStruct[]],
    [void],
    "nonpayable"
  >;

  revokePendingCap: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  revokePendingGuardian: TypedContractMethod<[], [void], "nonpayable">;

  revokePendingMarketRemoval: TypedContractMethod<
    [id: BytesLike],
    [void],
    "nonpayable"
  >;

  revokePendingTimelock: TypedContractMethod<[], [void], "nonpayable">;

  setCurator: TypedContractMethod<
    [newCurator: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setIsAllocator: TypedContractMethod<
    [newAllocator: AddressLike, newIsAllocator: boolean],
    [void],
    "nonpayable"
  >;

  setSkimRecipient: TypedContractMethod<
    [newSkimRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupplyQueue: TypedContractMethod<
    [newSupplyQueue: BytesLike[]],
    [void],
    "nonpayable"
  >;

  skim: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  skimRecipient: TypedContractMethod<[], [string], "view">;

  submitCap: TypedContractMethod<
    [marketParams: MarketParamsStruct, newSupplyCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitGuardian: TypedContractMethod<
    [newGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  submitMarketRemoval: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [void],
    "nonpayable"
  >;

  submitTimelock: TypedContractMethod<
    [newTimelock: BigNumberish],
    [void],
    "nonpayable"
  >;

  supplyQueue: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  supplyQueueLength: TypedContractMethod<[], [bigint], "view">;

  timelock: TypedContractMethod<[], [bigint], "view">;

  updateWithdrawQueue: TypedContractMethod<
    [indexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  withdrawQueue: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  withdrawQueueLength: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DECIMALS_OFFSET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MORPHO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptCap"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acceptGuardian"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptTimelock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "curator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "guardian"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAllocator"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastTotalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reallocate"
  ): TypedContractMethod<
    [allocations: MarketAllocationStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokePendingCap"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePendingGuardian"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePendingMarketRemoval"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePendingTimelock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurator"
  ): TypedContractMethod<[newCurator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsAllocator"
  ): TypedContractMethod<
    [newAllocator: AddressLike, newIsAllocator: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSkimRecipient"
  ): TypedContractMethod<[newSkimRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupplyQueue"
  ): TypedContractMethod<[newSupplyQueue: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "skim"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "skimRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitCap"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, newSupplyCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitGuardian"
  ): TypedContractMethod<[newGuardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitMarketRemoval"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTimelock"
  ): TypedContractMethod<[newTimelock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supplyQueue"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supplyQueueLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateWithdrawQueue"
  ): TypedContractMethod<[indexes: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawQueue"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawQueueLength"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
