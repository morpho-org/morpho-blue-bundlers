/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export interface EventsLibInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AccrueInterest"
      | "CreateMetaMorpho"
      | "ReallocateSupply"
      | "ReallocateWithdraw"
      | "RevokePendingCap"
      | "RevokePendingGuardian"
      | "RevokePendingMarketRemoval"
      | "RevokePendingTimelock"
      | "SetCap"
      | "SetCurator"
      | "SetFee"
      | "SetFeeRecipient"
      | "SetGuardian"
      | "SetIsAllocator"
      | "SetSkimRecipient"
      | "SetSupplyQueue"
      | "SetTimelock"
      | "SetWithdrawQueue"
      | "Skim"
      | "SubmitCap"
      | "SubmitGuardian"
      | "SubmitMarketRemoval"
      | "SubmitTimelock"
      | "UpdateLastTotalAssets"
  ): EventFragment;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [
    newTotalAssets: BigNumberish,
    feeShares: BigNumberish
  ];
  export type OutputTuple = [newTotalAssets: bigint, feeShares: bigint];
  export interface OutputObject {
    newTotalAssets: bigint;
    feeShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateMetaMorphoEvent {
  export type InputTuple = [
    metaMorpho: AddressLike,
    caller: AddressLike,
    initialOwner: AddressLike,
    initialTimelock: BigNumberish,
    asset: AddressLike,
    name: string,
    symbol: string,
    salt: BytesLike
  ];
  export type OutputTuple = [
    metaMorpho: string,
    caller: string,
    initialOwner: string,
    initialTimelock: bigint,
    asset: string,
    name: string,
    symbol: string,
    salt: string
  ];
  export interface OutputObject {
    metaMorpho: string;
    caller: string;
    initialOwner: string;
    initialTimelock: bigint;
    asset: string;
    name: string;
    symbol: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReallocateSupplyEvent {
  export type InputTuple = [
    caller: AddressLike,
    id: BytesLike,
    suppliedAssets: BigNumberish,
    suppliedShares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    id: string,
    suppliedAssets: bigint,
    suppliedShares: bigint
  ];
  export interface OutputObject {
    caller: string;
    id: string;
    suppliedAssets: bigint;
    suppliedShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReallocateWithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    id: BytesLike,
    withdrawnAssets: BigNumberish,
    withdrawnShares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    id: string,
    withdrawnAssets: bigint,
    withdrawnShares: bigint
  ];
  export interface OutputObject {
    caller: string;
    id: string;
    withdrawnAssets: bigint;
    withdrawnShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokePendingCapEvent {
  export type InputTuple = [caller: AddressLike, id: BytesLike];
  export type OutputTuple = [caller: string, id: string];
  export interface OutputObject {
    caller: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokePendingGuardianEvent {
  export type InputTuple = [caller: AddressLike];
  export type OutputTuple = [caller: string];
  export interface OutputObject {
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokePendingMarketRemovalEvent {
  export type InputTuple = [caller: AddressLike, id: BytesLike];
  export type OutputTuple = [caller: string, id: string];
  export interface OutputObject {
    caller: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokePendingTimelockEvent {
  export type InputTuple = [caller: AddressLike];
  export type OutputTuple = [caller: string];
  export interface OutputObject {
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCapEvent {
  export type InputTuple = [
    caller: AddressLike,
    id: BytesLike,
    cap: BigNumberish
  ];
  export type OutputTuple = [caller: string, id: string, cap: bigint];
  export interface OutputObject {
    caller: string;
    id: string;
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCuratorEvent {
  export type InputTuple = [newCurator: AddressLike];
  export type OutputTuple = [newCurator: string];
  export interface OutputObject {
    newCurator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeEvent {
  export type InputTuple = [caller: AddressLike, newFee: BigNumberish];
  export type OutputTuple = [caller: string, newFee: bigint];
  export interface OutputObject {
    caller: string;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeRecipientEvent {
  export type InputTuple = [newFeeRecipient: AddressLike];
  export type OutputTuple = [newFeeRecipient: string];
  export interface OutputObject {
    newFeeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGuardianEvent {
  export type InputTuple = [caller: AddressLike, guardian: AddressLike];
  export type OutputTuple = [caller: string, guardian: string];
  export interface OutputObject {
    caller: string;
    guardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsAllocatorEvent {
  export type InputTuple = [allocator: AddressLike, isAllocator: boolean];
  export type OutputTuple = [allocator: string, isAllocator: boolean];
  export interface OutputObject {
    allocator: string;
    isAllocator: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSkimRecipientEvent {
  export type InputTuple = [newSkimRecipient: AddressLike];
  export type OutputTuple = [newSkimRecipient: string];
  export interface OutputObject {
    newSkimRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSupplyQueueEvent {
  export type InputTuple = [caller: AddressLike, newSupplyQueue: BytesLike[]];
  export type OutputTuple = [caller: string, newSupplyQueue: string[]];
  export interface OutputObject {
    caller: string;
    newSupplyQueue: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTimelockEvent {
  export type InputTuple = [caller: AddressLike, newTimelock: BigNumberish];
  export type OutputTuple = [caller: string, newTimelock: bigint];
  export interface OutputObject {
    caller: string;
    newTimelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawQueueEvent {
  export type InputTuple = [caller: AddressLike, newWithdrawQueue: BytesLike[]];
  export type OutputTuple = [caller: string, newWithdrawQueue: string[]];
  export interface OutputObject {
    caller: string;
    newWithdrawQueue: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SkimEvent {
  export type InputTuple = [
    caller: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [caller: string, token: string, amount: bigint];
  export interface OutputObject {
    caller: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitCapEvent {
  export type InputTuple = [
    caller: AddressLike,
    id: BytesLike,
    cap: BigNumberish
  ];
  export type OutputTuple = [caller: string, id: string, cap: bigint];
  export interface OutputObject {
    caller: string;
    id: string;
    cap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitGuardianEvent {
  export type InputTuple = [newGuardian: AddressLike];
  export type OutputTuple = [newGuardian: string];
  export interface OutputObject {
    newGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitMarketRemovalEvent {
  export type InputTuple = [caller: AddressLike, id: BytesLike];
  export type OutputTuple = [caller: string, id: string];
  export interface OutputObject {
    caller: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitTimelockEvent {
  export type InputTuple = [newTimelock: BigNumberish];
  export type OutputTuple = [newTimelock: bigint];
  export interface OutputObject {
    newTimelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLastTotalAssetsEvent {
  export type InputTuple = [updatedTotalAssets: BigNumberish];
  export type OutputTuple = [updatedTotalAssets: bigint];
  export interface OutputObject {
    updatedTotalAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventsLib extends BaseContract {
  connect(runner?: ContractRunner | null): EventsLib;
  waitForDeployment(): Promise<this>;

  interface: EventsLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "CreateMetaMorpho"
  ): TypedContractEvent<
    CreateMetaMorphoEvent.InputTuple,
    CreateMetaMorphoEvent.OutputTuple,
    CreateMetaMorphoEvent.OutputObject
  >;
  getEvent(
    key: "ReallocateSupply"
  ): TypedContractEvent<
    ReallocateSupplyEvent.InputTuple,
    ReallocateSupplyEvent.OutputTuple,
    ReallocateSupplyEvent.OutputObject
  >;
  getEvent(
    key: "ReallocateWithdraw"
  ): TypedContractEvent<
    ReallocateWithdrawEvent.InputTuple,
    ReallocateWithdrawEvent.OutputTuple,
    ReallocateWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "RevokePendingCap"
  ): TypedContractEvent<
    RevokePendingCapEvent.InputTuple,
    RevokePendingCapEvent.OutputTuple,
    RevokePendingCapEvent.OutputObject
  >;
  getEvent(
    key: "RevokePendingGuardian"
  ): TypedContractEvent<
    RevokePendingGuardianEvent.InputTuple,
    RevokePendingGuardianEvent.OutputTuple,
    RevokePendingGuardianEvent.OutputObject
  >;
  getEvent(
    key: "RevokePendingMarketRemoval"
  ): TypedContractEvent<
    RevokePendingMarketRemovalEvent.InputTuple,
    RevokePendingMarketRemovalEvent.OutputTuple,
    RevokePendingMarketRemovalEvent.OutputObject
  >;
  getEvent(
    key: "RevokePendingTimelock"
  ): TypedContractEvent<
    RevokePendingTimelockEvent.InputTuple,
    RevokePendingTimelockEvent.OutputTuple,
    RevokePendingTimelockEvent.OutputObject
  >;
  getEvent(
    key: "SetCap"
  ): TypedContractEvent<
    SetCapEvent.InputTuple,
    SetCapEvent.OutputTuple,
    SetCapEvent.OutputObject
  >;
  getEvent(
    key: "SetCurator"
  ): TypedContractEvent<
    SetCuratorEvent.InputTuple,
    SetCuratorEvent.OutputTuple,
    SetCuratorEvent.OutputObject
  >;
  getEvent(
    key: "SetFee"
  ): TypedContractEvent<
    SetFeeEvent.InputTuple,
    SetFeeEvent.OutputTuple,
    SetFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeRecipient"
  ): TypedContractEvent<
    SetFeeRecipientEvent.InputTuple,
    SetFeeRecipientEvent.OutputTuple,
    SetFeeRecipientEvent.OutputObject
  >;
  getEvent(
    key: "SetGuardian"
  ): TypedContractEvent<
    SetGuardianEvent.InputTuple,
    SetGuardianEvent.OutputTuple,
    SetGuardianEvent.OutputObject
  >;
  getEvent(
    key: "SetIsAllocator"
  ): TypedContractEvent<
    SetIsAllocatorEvent.InputTuple,
    SetIsAllocatorEvent.OutputTuple,
    SetIsAllocatorEvent.OutputObject
  >;
  getEvent(
    key: "SetSkimRecipient"
  ): TypedContractEvent<
    SetSkimRecipientEvent.InputTuple,
    SetSkimRecipientEvent.OutputTuple,
    SetSkimRecipientEvent.OutputObject
  >;
  getEvent(
    key: "SetSupplyQueue"
  ): TypedContractEvent<
    SetSupplyQueueEvent.InputTuple,
    SetSupplyQueueEvent.OutputTuple,
    SetSupplyQueueEvent.OutputObject
  >;
  getEvent(
    key: "SetTimelock"
  ): TypedContractEvent<
    SetTimelockEvent.InputTuple,
    SetTimelockEvent.OutputTuple,
    SetTimelockEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawQueue"
  ): TypedContractEvent<
    SetWithdrawQueueEvent.InputTuple,
    SetWithdrawQueueEvent.OutputTuple,
    SetWithdrawQueueEvent.OutputObject
  >;
  getEvent(
    key: "Skim"
  ): TypedContractEvent<
    SkimEvent.InputTuple,
    SkimEvent.OutputTuple,
    SkimEvent.OutputObject
  >;
  getEvent(
    key: "SubmitCap"
  ): TypedContractEvent<
    SubmitCapEvent.InputTuple,
    SubmitCapEvent.OutputTuple,
    SubmitCapEvent.OutputObject
  >;
  getEvent(
    key: "SubmitGuardian"
  ): TypedContractEvent<
    SubmitGuardianEvent.InputTuple,
    SubmitGuardianEvent.OutputTuple,
    SubmitGuardianEvent.OutputObject
  >;
  getEvent(
    key: "SubmitMarketRemoval"
  ): TypedContractEvent<
    SubmitMarketRemovalEvent.InputTuple,
    SubmitMarketRemovalEvent.OutputTuple,
    SubmitMarketRemovalEvent.OutputObject
  >;
  getEvent(
    key: "SubmitTimelock"
  ): TypedContractEvent<
    SubmitTimelockEvent.InputTuple,
    SubmitTimelockEvent.OutputTuple,
    SubmitTimelockEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLastTotalAssets"
  ): TypedContractEvent<
    UpdateLastTotalAssetsEvent.InputTuple,
    UpdateLastTotalAssetsEvent.OutputTuple,
    UpdateLastTotalAssetsEvent.OutputObject
  >;

  filters: {
    "AccrueInterest(uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "CreateMetaMorpho(address,address,address,uint256,address,string,string,bytes32)": TypedContractEvent<
      CreateMetaMorphoEvent.InputTuple,
      CreateMetaMorphoEvent.OutputTuple,
      CreateMetaMorphoEvent.OutputObject
    >;
    CreateMetaMorpho: TypedContractEvent<
      CreateMetaMorphoEvent.InputTuple,
      CreateMetaMorphoEvent.OutputTuple,
      CreateMetaMorphoEvent.OutputObject
    >;

    "ReallocateSupply(address,bytes32,uint256,uint256)": TypedContractEvent<
      ReallocateSupplyEvent.InputTuple,
      ReallocateSupplyEvent.OutputTuple,
      ReallocateSupplyEvent.OutputObject
    >;
    ReallocateSupply: TypedContractEvent<
      ReallocateSupplyEvent.InputTuple,
      ReallocateSupplyEvent.OutputTuple,
      ReallocateSupplyEvent.OutputObject
    >;

    "ReallocateWithdraw(address,bytes32,uint256,uint256)": TypedContractEvent<
      ReallocateWithdrawEvent.InputTuple,
      ReallocateWithdrawEvent.OutputTuple,
      ReallocateWithdrawEvent.OutputObject
    >;
    ReallocateWithdraw: TypedContractEvent<
      ReallocateWithdrawEvent.InputTuple,
      ReallocateWithdrawEvent.OutputTuple,
      ReallocateWithdrawEvent.OutputObject
    >;

    "RevokePendingCap(address,bytes32)": TypedContractEvent<
      RevokePendingCapEvent.InputTuple,
      RevokePendingCapEvent.OutputTuple,
      RevokePendingCapEvent.OutputObject
    >;
    RevokePendingCap: TypedContractEvent<
      RevokePendingCapEvent.InputTuple,
      RevokePendingCapEvent.OutputTuple,
      RevokePendingCapEvent.OutputObject
    >;

    "RevokePendingGuardian(address)": TypedContractEvent<
      RevokePendingGuardianEvent.InputTuple,
      RevokePendingGuardianEvent.OutputTuple,
      RevokePendingGuardianEvent.OutputObject
    >;
    RevokePendingGuardian: TypedContractEvent<
      RevokePendingGuardianEvent.InputTuple,
      RevokePendingGuardianEvent.OutputTuple,
      RevokePendingGuardianEvent.OutputObject
    >;

    "RevokePendingMarketRemoval(address,bytes32)": TypedContractEvent<
      RevokePendingMarketRemovalEvent.InputTuple,
      RevokePendingMarketRemovalEvent.OutputTuple,
      RevokePendingMarketRemovalEvent.OutputObject
    >;
    RevokePendingMarketRemoval: TypedContractEvent<
      RevokePendingMarketRemovalEvent.InputTuple,
      RevokePendingMarketRemovalEvent.OutputTuple,
      RevokePendingMarketRemovalEvent.OutputObject
    >;

    "RevokePendingTimelock(address)": TypedContractEvent<
      RevokePendingTimelockEvent.InputTuple,
      RevokePendingTimelockEvent.OutputTuple,
      RevokePendingTimelockEvent.OutputObject
    >;
    RevokePendingTimelock: TypedContractEvent<
      RevokePendingTimelockEvent.InputTuple,
      RevokePendingTimelockEvent.OutputTuple,
      RevokePendingTimelockEvent.OutputObject
    >;

    "SetCap(address,bytes32,uint256)": TypedContractEvent<
      SetCapEvent.InputTuple,
      SetCapEvent.OutputTuple,
      SetCapEvent.OutputObject
    >;
    SetCap: TypedContractEvent<
      SetCapEvent.InputTuple,
      SetCapEvent.OutputTuple,
      SetCapEvent.OutputObject
    >;

    "SetCurator(address)": TypedContractEvent<
      SetCuratorEvent.InputTuple,
      SetCuratorEvent.OutputTuple,
      SetCuratorEvent.OutputObject
    >;
    SetCurator: TypedContractEvent<
      SetCuratorEvent.InputTuple,
      SetCuratorEvent.OutputTuple,
      SetCuratorEvent.OutputObject
    >;

    "SetFee(address,uint256)": TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;
    SetFee: TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;

    "SetFeeRecipient(address)": TypedContractEvent<
      SetFeeRecipientEvent.InputTuple,
      SetFeeRecipientEvent.OutputTuple,
      SetFeeRecipientEvent.OutputObject
    >;
    SetFeeRecipient: TypedContractEvent<
      SetFeeRecipientEvent.InputTuple,
      SetFeeRecipientEvent.OutputTuple,
      SetFeeRecipientEvent.OutputObject
    >;

    "SetGuardian(address,address)": TypedContractEvent<
      SetGuardianEvent.InputTuple,
      SetGuardianEvent.OutputTuple,
      SetGuardianEvent.OutputObject
    >;
    SetGuardian: TypedContractEvent<
      SetGuardianEvent.InputTuple,
      SetGuardianEvent.OutputTuple,
      SetGuardianEvent.OutputObject
    >;

    "SetIsAllocator(address,bool)": TypedContractEvent<
      SetIsAllocatorEvent.InputTuple,
      SetIsAllocatorEvent.OutputTuple,
      SetIsAllocatorEvent.OutputObject
    >;
    SetIsAllocator: TypedContractEvent<
      SetIsAllocatorEvent.InputTuple,
      SetIsAllocatorEvent.OutputTuple,
      SetIsAllocatorEvent.OutputObject
    >;

    "SetSkimRecipient(address)": TypedContractEvent<
      SetSkimRecipientEvent.InputTuple,
      SetSkimRecipientEvent.OutputTuple,
      SetSkimRecipientEvent.OutputObject
    >;
    SetSkimRecipient: TypedContractEvent<
      SetSkimRecipientEvent.InputTuple,
      SetSkimRecipientEvent.OutputTuple,
      SetSkimRecipientEvent.OutputObject
    >;

    "SetSupplyQueue(address,bytes32[])": TypedContractEvent<
      SetSupplyQueueEvent.InputTuple,
      SetSupplyQueueEvent.OutputTuple,
      SetSupplyQueueEvent.OutputObject
    >;
    SetSupplyQueue: TypedContractEvent<
      SetSupplyQueueEvent.InputTuple,
      SetSupplyQueueEvent.OutputTuple,
      SetSupplyQueueEvent.OutputObject
    >;

    "SetTimelock(address,uint256)": TypedContractEvent<
      SetTimelockEvent.InputTuple,
      SetTimelockEvent.OutputTuple,
      SetTimelockEvent.OutputObject
    >;
    SetTimelock: TypedContractEvent<
      SetTimelockEvent.InputTuple,
      SetTimelockEvent.OutputTuple,
      SetTimelockEvent.OutputObject
    >;

    "SetWithdrawQueue(address,bytes32[])": TypedContractEvent<
      SetWithdrawQueueEvent.InputTuple,
      SetWithdrawQueueEvent.OutputTuple,
      SetWithdrawQueueEvent.OutputObject
    >;
    SetWithdrawQueue: TypedContractEvent<
      SetWithdrawQueueEvent.InputTuple,
      SetWithdrawQueueEvent.OutputTuple,
      SetWithdrawQueueEvent.OutputObject
    >;

    "Skim(address,address,uint256)": TypedContractEvent<
      SkimEvent.InputTuple,
      SkimEvent.OutputTuple,
      SkimEvent.OutputObject
    >;
    Skim: TypedContractEvent<
      SkimEvent.InputTuple,
      SkimEvent.OutputTuple,
      SkimEvent.OutputObject
    >;

    "SubmitCap(address,bytes32,uint256)": TypedContractEvent<
      SubmitCapEvent.InputTuple,
      SubmitCapEvent.OutputTuple,
      SubmitCapEvent.OutputObject
    >;
    SubmitCap: TypedContractEvent<
      SubmitCapEvent.InputTuple,
      SubmitCapEvent.OutputTuple,
      SubmitCapEvent.OutputObject
    >;

    "SubmitGuardian(address)": TypedContractEvent<
      SubmitGuardianEvent.InputTuple,
      SubmitGuardianEvent.OutputTuple,
      SubmitGuardianEvent.OutputObject
    >;
    SubmitGuardian: TypedContractEvent<
      SubmitGuardianEvent.InputTuple,
      SubmitGuardianEvent.OutputTuple,
      SubmitGuardianEvent.OutputObject
    >;

    "SubmitMarketRemoval(address,bytes32)": TypedContractEvent<
      SubmitMarketRemovalEvent.InputTuple,
      SubmitMarketRemovalEvent.OutputTuple,
      SubmitMarketRemovalEvent.OutputObject
    >;
    SubmitMarketRemoval: TypedContractEvent<
      SubmitMarketRemovalEvent.InputTuple,
      SubmitMarketRemovalEvent.OutputTuple,
      SubmitMarketRemovalEvent.OutputObject
    >;

    "SubmitTimelock(uint256)": TypedContractEvent<
      SubmitTimelockEvent.InputTuple,
      SubmitTimelockEvent.OutputTuple,
      SubmitTimelockEvent.OutputObject
    >;
    SubmitTimelock: TypedContractEvent<
      SubmitTimelockEvent.InputTuple,
      SubmitTimelockEvent.OutputTuple,
      SubmitTimelockEvent.OutputObject
    >;

    "UpdateLastTotalAssets(uint256)": TypedContractEvent<
      UpdateLastTotalAssetsEvent.InputTuple,
      UpdateLastTotalAssetsEvent.OutputTuple,
      UpdateLastTotalAssetsEvent.OutputObject
    >;
    UpdateLastTotalAssets: TypedContractEvent<
      UpdateLastTotalAssetsEvent.InputTuple,
      UpdateLastTotalAssetsEvent.OutputTuple,
      UpdateLastTotalAssetsEvent.OutputObject
    >;
  };
}
