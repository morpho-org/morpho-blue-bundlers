/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ERC20WrapperBundler,
  ERC20WrapperBundlerInterface,
} from "../../src/ERC20WrapperBundler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wrapper",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "erc20WrapperDepositFor",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wrapper",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "erc20WrapperWithdrawTo",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "initiator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class ERC20WrapperBundler__factory {
  static readonly abi = _abi;
  static createInterface(): ERC20WrapperBundlerInterface {
    return new Interface(_abi) as ERC20WrapperBundlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20WrapperBundler {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ERC20WrapperBundler;
  }
}
