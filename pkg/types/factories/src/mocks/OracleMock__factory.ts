/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  OracleMock,
  OracleMockInterface,
} from "../../../src/mocks/OracleMock";

const _abi = [
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760d9908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c806391b7f5ed14606a5763a035b1fe14603257600080fd5b34606657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112606657602091548152f35b5080fd5b823460a05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260a057600435815580f35b80fdfea2646970667358221220fbf165eab6cd9304a50bd4a45035000b5d04420e6a0eb5ef4489d1d1657fc2ac64736f6c63430008180033";

type OracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleMock__factory extends ContractFactory {
  constructor(...args: OracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleMock__factory {
    return super.connect(runner) as OracleMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleMockInterface {
    return new Interface(_abi) as OracleMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleMock {
    return new Contract(address, _abi, runner) as unknown as OracleMock;
  }
}
