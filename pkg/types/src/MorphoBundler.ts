/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MarketParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  oracle: AddressLike;
  irm: AddressLike;
  lltv: BigNumberish;
};

export type MarketParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  oracle: string,
  irm: string,
  lltv: bigint
] & {
  loanToken: string;
  collateralToken: string;
  oracle: string;
  irm: string;
  lltv: bigint;
};

export type AuthorizationStruct = {
  authorizer: AddressLike;
  authorized: AddressLike;
  isAuthorized: boolean;
  nonce: BigNumberish;
  deadline: BigNumberish;
};

export type AuthorizationStructOutput = [
  authorizer: string,
  authorized: string,
  isAuthorized: boolean,
  nonce: bigint,
  deadline: bigint
] & {
  authorizer: string;
  authorized: string;
  isAuthorized: boolean;
  nonce: bigint;
  deadline: bigint;
};

export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
  v: bigint;
  r: string;
  s: string;
};

export type WithdrawalStruct = {
  marketParams: MarketParamsStruct;
  amount: BigNumberish;
};

export type WithdrawalStructOutput = [
  marketParams: MarketParamsStructOutput,
  amount: bigint
] & { marketParams: MarketParamsStructOutput; amount: bigint };

export interface MorphoBundlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MORPHO"
      | "initiator"
      | "morphoBorrow"
      | "morphoFlashLoan"
      | "morphoRepay"
      | "morphoSetAuthorizationWithSig"
      | "morphoSupply"
      | "morphoSupplyCollateral"
      | "morphoWithdraw"
      | "morphoWithdrawCollateral"
      | "multicall"
      | "onMorphoFlashLoan"
      | "onMorphoRepay"
      | "onMorphoSupply"
      | "onMorphoSupplyCollateral"
      | "reallocateTo"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MORPHO", values?: undefined): string;
  encodeFunctionData(functionFragment: "initiator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "morphoBorrow",
    values: [
      MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoFlashLoan",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoRepay",
    values: [
      MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoSetAuthorizationWithSig",
    values: [AuthorizationStruct, SignatureStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoSupply",
    values: [
      MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoSupplyCollateral",
    values: [MarketParamsStruct, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoWithdraw",
    values: [
      MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoWithdrawCollateral",
    values: [MarketParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoFlashLoan",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoRepay",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoSupply",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onMorphoSupplyCollateral",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reallocateTo",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      WithdrawalStruct[],
      MarketParamsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "MORPHO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initiator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "morphoBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoSetAuthorizationWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoSupplyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMorphoSupplyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reallocateTo",
    data: BytesLike
  ): Result;
}

export interface MorphoBundler extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoBundler;
  waitForDeployment(): Promise<this>;

  interface: MorphoBundlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MORPHO: TypedContractMethod<[], [string], "view">;

  initiator: TypedContractMethod<[], [string], "view">;

  morphoBorrow: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;

  morphoFlashLoan: TypedContractMethod<
    [token: AddressLike, assets: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;

  morphoRepay: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;

  morphoSetAuthorizationWithSig: TypedContractMethod<
    [
      authorization: AuthorizationStruct,
      signature: SignatureStruct,
      skipRevert: boolean
    ],
    [void],
    "payable"
  >;

  morphoSupply: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;

  morphoSupplyCollateral: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;

  morphoWithdraw: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;

  morphoWithdrawCollateral: TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [void], "payable">;

  onMorphoFlashLoan: TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onMorphoRepay: TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onMorphoSupply: TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  onMorphoSupplyCollateral: TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  reallocateTo: TypedContractMethod<
    [
      publicAllocator: AddressLike,
      vault: AddressLike,
      value: BigNumberish,
      withdrawals: WithdrawalStruct[],
      supplyMarketParams: MarketParamsStruct
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MORPHO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "morphoBorrow"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoFlashLoan"
  ): TypedContractMethod<
    [token: AddressLike, assets: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoRepay"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoSetAuthorizationWithSig"
  ): TypedContractMethod<
    [
      authorization: AuthorizationStruct,
      signature: SignatureStruct,
      skipRevert: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoSupply"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoSupplyCollateral"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoWithdraw"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      slippageAmount: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "morphoWithdrawCollateral"
  ): TypedContractMethod<
    [
      marketParams: MarketParamsStruct,
      assets: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [void], "payable">;
  getFunction(
    nameOrSignature: "onMorphoFlashLoan"
  ): TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onMorphoRepay"
  ): TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onMorphoSupply"
  ): TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onMorphoSupplyCollateral"
  ): TypedContractMethod<
    [arg0: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reallocateTo"
  ): TypedContractMethod<
    [
      publicAllocator: AddressLike,
      vault: AddressLike,
      value: BigNumberish,
      withdrawals: WithdrawalStruct[],
      supplyMarketParams: MarketParamsStruct
    ],
    [void],
    "payable"
  >;

  filters: {};
}
