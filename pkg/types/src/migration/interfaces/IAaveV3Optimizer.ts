/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
  v: bigint;
  r: string;
  s: string;
};

export interface IAaveV3OptimizerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "approveManager"
      | "approveManagerWithSig"
      | "borrow"
      | "claimRewards"
      | "liquidate"
      | "repay"
      | "repayWithPermit"
      | "supply"
      | "supplyCollateral"
      | "supplyCollateralWithPermit"
      | "supplyWithPermit"
      | "withdraw"
      | "withdrawCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveManagerWithSig",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCollateral",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCollateralWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManagerWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCollateralWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export interface IAaveV3Optimizer extends BaseContract {
  connect(runner?: ContractRunner | null): IAaveV3Optimizer;
  waitForDeployment(): Promise<this>;

  interface: IAaveV3OptimizerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  approveManager: TypedContractMethod<
    [manager: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;

  approveManagerWithSig: TypedContractMethod<
    [
      delegator: AddressLike,
      manager: AddressLike,
      isAllowed: boolean,
      nonce: BigNumberish,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<
    [assets: AddressLike[], onBehalf: AddressLike],
    [
      [string[], bigint[]] & {
        rewardTokens: string[];
        claimedAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;

  liquidate: TypedContractMethod<
    [
      underlyingBorrowed: AddressLike,
      underlyingCollateral: AddressLike,
      user: AddressLike,
      amount: BigNumberish
    ],
    [[bigint, bigint] & { repaid: bigint; seized: bigint }],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;

  repayWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  supply: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  supplyCollateral: TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;

  supplyCollateralWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  supplyWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveManager"
  ): TypedContractMethod<
    [manager: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveManagerWithSig"
  ): TypedContractMethod<
    [
      delegator: AddressLike,
      manager: AddressLike,
      isAllowed: boolean,
      nonce: BigNumberish,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [assets: AddressLike[], onBehalf: AddressLike],
    [
      [string[], bigint[]] & {
        rewardTokens: string[];
        claimedAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      underlyingBorrowed: AddressLike,
      underlyingCollateral: AddressLike,
      user: AddressLike,
      amount: BigNumberish
    ],
    [[bigint, bigint] & { repaid: bigint; seized: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyCollateral"
  ): TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyCollateralWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish,
      deadline: BigNumberish,
      signature: SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
